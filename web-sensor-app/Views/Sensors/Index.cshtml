@using web_sensor_app.Core
@using web_sensor_app.Models.Enums
@using web_sensor_app.Models.RequestModels
@using web_sensor_app.Models.ResponseModels
@model Page<SensorResponse>

@{
    ViewBag.Title = "Manage Sensors";
}
<div class="container">
    <!-- Header and Add Button -->
    <div class="d-flex justify-content-between mb-3">
        <h3>Manage Sensors</h3>
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addSensorModal">Add Sensor</button>
    </div>

    <!-- Sensors Table -->
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Name</th>
                <th>Location</th>
                <th>Min Value</th>
                <th>Max Value</th>
                <th>Current Value</th>
                <th>Status</th>
                <th>Created Date</th>
            </tr>
        </thead>
        <tbody id="sensorTableBody">
            <!-- Existing Sensors -->
            @foreach (var sensor in Model.Items)
            {
                <tr>
                    <td>@sensor.Name</td>
                    <td>@sensor.Location</td>
                    <td>@sensor.MinValue</td>
                    <td>@sensor.MaxValue</td>
                    <td>@sensor.CurrentValue</td>
                    <td>@sensor.Status</td>
                    <td>@sensor.CreateDate.ToString("yyyy-MM-dd")</td>
                </tr>
            }
        </tbody>
    </table>
    <!-- Pagination Controls -->
    <nav class="d-flex justify-content-center justify-content-between">
        <!-- Page Size Dropdown -->
        <div>
            <label for="pageSize">Page Size: </label>
            <select id="pageSize" class="form-control" style="width: auto; display: inline-block;" onchange="changePageSize(this.value)">
                <option value="10">10</option>
                <option value="50">50</option>
                <option value="100">100</option>
            </select>
        </div>
        <ul class="pagination ">
            <!-- < for previous page -->
            @if (Model.Index > 1)
            {
                <li class="page-item">
                    <a class="page-link" href="#" onclick="navigateToPage(@(Model.Index - 1))">&lt;</a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span class="page-link">&lt;</span>
                </li>
            }

            <!-- Page Numbers -->
            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                if (i == Model.Index)
                {
                    <li class="page-item active">
                        <span class="page-link">@i</span>
                    </li>
                }
                else
                {
                    <li class="page-item">
                        <a class="page-link" href="#" onclick="navigateToPage(@i)">@i</a>
                    </li>
                }
            }

            <!-- > for next page -->
            @if (Model.Index < Model.TotalPages)
            {
                <li class="page-item">
                    <a class="page-link" href="#" onclick="navigateToPage(@(Model.Index + 1))">&gt;</a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span class="page-link">&gt;</span>
                </li>
            }
        </ul>
    </nav>

    <!-- Save All New Sensors Button -->
    <div class="mt-3 text-start">
        <button id="saveSensorsBtn" class="btn btn-success" style="display: none;" onclick="saveNewSensors()">Save All New Sensors</button>
    </div>
    <!-- Modal for Adding Sensors -->
    <div class="modal fade" id="addSensorModal" tabindex="-1" aria-labelledby="addSensorModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addSensorModalLabel">Add New Sensor</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addSensorForm">
                        <!-- Input fields for sensor details -->
                        <div class="form-group">
                            <label for="sensorName">Name:</label>
                            <input type="text" id="sensorName" class="form-control" required />
                        </div>
                        <div class="form-group">
                            <label for="sensorLocation">Location:</label>
                            <input type="text" id="sensorLocation" class="form-control" required />
                        </div>
                        <div class="form-group">
                            <label for="sensorMinValue">Min Value:</label>
                            <input type="number" id="sensorMinValue" class="form-control" required />
                        </div>
                        <div class="form-group">
                            <label for="sensorMaxValue">Max Value:</label>
                            <input type="number" id="sensorMaxValue" class="form-control" required />
                        </div>
                        <div class="form-group">
                            <label for="sensorCurrentValue">Current Value:</label>
                            <input type="number" id="sensorCurrentValue" class="form-control" required />
                        </div>
                        <div class="form-group">
                            <label for="sensorStatus">Status:</label>
                            <select id="sensorStatus" class="form-control" required>
                                <!-- Populate status dropdown from enum -->
                                @foreach (int status in Enum.GetValues(typeof(SensorStatus)))
                                {
                                    <option value="@status">@Enum.GetName(typeof(SensorStatus), status)</option>
                                }
                            </select>
                        </div>
                        <button type="button" class="btn btn-primary mt-3" onclick="addSensor()">Add</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    let sensorIndex = 0; // Counter to track sensors
    let newSensors = []; // Array to store new sensors
    // Function to handle page size change
    function changePageSize(pageSize) {
        // Get the current page number from the URL
        const urlParams = new URLSearchParams(window.location.search);
        const currentPage = urlParams.get('page') || 1; // Default to 1 if no page param

        // Redirect to the page with the selected page PageSize
        window.location.href = `?page=${currentPage}&PageSize=${pageSize}`;
    }

    // Function to navigate to a specific page
    function navigateToPage(pageNumber) {
        // Get the current page size from the page PageSize dropdown
        const pageSize = document.getElementById('pageSize').value;

        // Redirect to the selected page with the current page size
        window.location.href = `?page=${pageNumber}&PageSize=${pageSize}`;
    }

    // Initialize page size dropdown to reflect the current page size from the URL
    document.addEventListener('DOMContentLoaded', function () {
        const urlParams = new URLSearchParams(window.location.search);
        const currentSize = urlParams.get('PageSize') || 10; // Default to 10 if no PageSize param
        document.getElementById('pageSize').value = currentSize;
    });
    // Get the name of the selected status from the dropdown
    function getStatusName() {
        const selectedIndex = document.getElementById('sensorStatus').selectedIndex;
        const selectedOption = document.getElementById('sensorStatus').options[selectedIndex];
        return selectedOption.text;
    }

    // Add a new sensor and display it in the table
    function addSensor() {
        // Retrieve input values
        const name = document.getElementById('sensorName').value;
        const location = document.getElementById('sensorLocation').value;
        const minValue = parseInt(document.getElementById('sensorMinValue').value) || 0;
        const maxValue = parseInt(document.getElementById('sensorMaxValue').value) || 100;
        const currentValue = parseInt(document.getElementById('sensorCurrentValue').value) || 0;
        const status = parseInt(document.getElementById('sensorStatus').value) || 0;
        const statusName = getStatusName() || "Unknown";

        // Validate required fields
        if (!name || !location) {
            alert("Name and Location are required.");
            return;
        }

        // Add a new row to the table
        const tableBody = document.getElementById('sensorTableBody');
        const newRow = tableBody.insertRow(0); // 0 will insert the row at the top
        newRow.insertCell(0).textContent = name;
        newRow.insertCell(1).textContent = location;
        newRow.insertCell(2).textContent = minValue;
        newRow.insertCell(3).textContent = maxValue;
        newRow.insertCell(4).textContent = currentValue;
        newRow.insertCell(5).textContent = statusName;
        newRow.insertCell(6).textContent = "-"; // Placeholder for Created Date

        // Add the new sensor to the array
        newSensors.push({
            id: generateGUID(),
            name: name,
            location: location,
            minValue: minValue,
            maxValue: maxValue,
            currentValue: currentValue,
            status: status
        });
        function generateGUID() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = Math.random() * 16 | 0,
                    v = c === 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }

        // Show the Save button
        document.getElementById('saveSensorsBtn').style.display = "block";

        // Close the modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('addSensorModal'));
        modal.hide();

        // Clear the form
        document.getElementById('addSensorForm').reset();
    }

    // Save all new sensors to the API
    function saveNewSensors() {
        if (newSensors.length === 0) {
            alert("No new sensors to save.");
            return;
        }

        // Send POST request to the API
        fetch('/Sensor/SaveTemporary', { // Adjust URL as needed
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ Requests: newSensors })
        })
            .then(response => {
                if (response.ok) {
                    alert("New sensors saved successfully!");
                    newSensors = []; // Clear array
                    document.getElementById('saveSensorsBtn').style.display = "none"; // Hide Save button
                } else {
                    response.text().then(text => alert("Error: " + text));
                }
            })
            .catch(error => alert("Error: " + error));
    }
</script>